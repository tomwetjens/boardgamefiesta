AWSTemplateFormatVersion: "2010-09-09"
Description: Lambda SQS for Board Game Fiesta
Parameters:
  Environment:
    Type: String
  LambdaS3Bucket:
    Type: String
  LambdaS3Key:
    Type: String
  DynamoDbStackName:
    Type: String
  WebSocketStackName:
    Type: String
Conditions:
  IsProduction: !Equals [ !Ref Environment, 'prod' ]
Resources:
  AutomaSqsQueue:
    Type: AWS::SQS::Queue
    DeletionPolicy: Retain
    Properties:
      MessageRetentionPeriod: 345600
      VisibilityTimeout: 30
      DelaySeconds: 1 # Simulate computer thinking

  ExecutePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - sqs:SendMessage
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
            Resource:
              - !GetAtt AutomaSqsQueue.Arn
          - Effect: Allow
            Action:
              - ses:SendEmail
            Resource: !Sub 'arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/*'

  ScheduleOnlyPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - sqs:SendMessage
            Resource:
              - !GetAtt AutomaSqsQueue.Arn

  AutomaSqsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref ExecutePolicy
        - Fn::ImportValue: !Sub '${DynamoDbStackName}-ReadWritePolicyArn'
        - Fn::ImportValue: !Sub '${WebSocketStackName}-SendMessagePolicyArn'
      Path: "/"

  AutomaSqsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: io.quarkus.amazon.lambda.runtime.QuarkusStreamHandler::handleRequest
      MemorySize: 1024
      Role: !GetAtt AutomaSqsRole.Arn
      Runtime: java11
      Timeout: 30
      Environment:
        Variables:
          QUARKUS_PROFILE: !Sub '${Environment}'
          QUARKUS_LAMBDA_HANDLER: automa
          BGF_DYNAMODB_TABLE_NAME:
            Fn::ImportValue: !Sub '${DynamoDbStackName}-TableName'
          BGF_SQS_QUEUE_URL: !Ref AutomaSqsQueue
          BGF_WS_CONNECTIONS_ENDPOINT:
            Fn::ImportValue: !Sub '${WebSocketStackName}-WsApiEndpoint'
      Code:
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: !Ref LambdaS3Key

  AutomaSqsFunctionTrigger:
    Type: AWS::Lambda::EventSourceMapping
    DependsOn:
      - AutomaSqsQueue
      - AutomaSqsFunction
    Properties:
      BatchSize: 10
      EventSourceArn: !GetAtt AutomaSqsQueue.Arn
      FunctionName: !Ref AutomaSqsFunction
      FunctionResponseTypes:
        - ReportBatchItemFailures
      MaximumBatchingWindowInSeconds: 0

Outputs:
  AutomaSqsQueueArn:
    Value: !GetAtt AutomaSqsQueue.Arn
    Export:
      Name: !Sub '${AWS::StackName}-AutomaSqsQueueArn'
  AutomaSqsQueueUrl:
    Value: !Ref AutomaSqsQueue
    Export:
      Name: !Sub '${AWS::StackName}-AutomaSqsQueueUrl'
  ScheduleOnlyPolicyArn:
    Value: !Ref ScheduleOnlyPolicy
    Export:
      Name: !Sub '${AWS::StackName}-ScheduleOnlyPolicyArn'