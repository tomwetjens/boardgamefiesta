AWSTemplateFormatVersion: "2010-09-09"
Description: API Gateway WebSocket for Board Game Fiesta
Parameters:
  Environment:
    Type: String
  LambdaS3Bucket:
    Type: String
  LambdaS3Key:
    Type: String
  DynamoDbStackName:
    Type: String
  CognitoStackName:
    Type: String
Conditions:
  IsProduction: !Equals [ !Ref Environment, 'prod' ]
Resources:
  WsApiRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Fn::ImportValue: !Sub '${DynamoDbStackName}-ReadWritePolicyArn'
      Path: "/"

  WsConnectFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: io.quarkus.amazon.lambda.runtime.QuarkusStreamHandler::handleRequest
      MemorySize: 512
      Role: !GetAtt WsApiRole.Arn
      Runtime: java11
      Timeout: 60
      Environment:
        Variables:
          QUARKUS_PROFILE: !Sub '${Environment}'
          QUARKUS_LAMBDA_HANDLER: ConnectHandler
          QUARKUS_OIDC_AUTH_SERVER_URL:
            Fn::ImportValue: !Sub '${CognitoStackName}-UserPoolUrl'
          QUARKUS_OIDC_CLIENT_ID:
            Fn::ImportValue: !Sub '${CognitoStackName}-WebAppClientId'
          BGF_DYNAMODB_TABLE_NAME:
            Fn::ImportValue: !Sub '${DynamoDbStackName}-TableName'
      Code:
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: !Ref LambdaS3Key

  WsDisconnectFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: io.quarkus.amazon.lambda.runtime.QuarkusStreamHandler::handleRequest
      MemorySize: 512
      Role: !GetAtt WsApiRole.Arn
      Runtime: java11
      Timeout: 60
      Environment:
        Variables:
          QUARKUS_PROFILE: !Sub '${Environment}'
          QUARKUS_LAMBDA_HANDLER: DisconnectHandler
          QUARKUS_OIDC_AUTH_SERVER_URL:
            Fn::ImportValue: !Sub '${CognitoStackName}-UserPoolUrl'
          QUARKUS_OIDC_CLIENT_ID:
            Fn::ImportValue: !Sub '${CognitoStackName}-WebAppClientId'
          BGF_DYNAMODB_TABLE_NAME:
            Fn::ImportValue: !Sub '${DynamoDbStackName}-TableName'
      Code:
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: !Ref LambdaS3Key

  WsDefaultFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: io.quarkus.amazon.lambda.runtime.QuarkusStreamHandler::handleRequest
      MemorySize: 512
      Role: !GetAtt WsApiRole.Arn
      Runtime: java11
      Timeout: 60
      Environment:
        Variables:
          QUARKUS_PROFILE: !Sub '${Environment}'
          QUARKUS_LAMBDA_HANDLER: DefaultHandler
          QUARKUS_OIDC_AUTH_SERVER_URL:
            Fn::ImportValue: !Sub '${CognitoStackName}-UserPoolUrl'
          QUARKUS_OIDC_CLIENT_ID:
            Fn::ImportValue: !Sub '${CognitoStackName}-WebAppClientId'
          BGF_DYNAMODB_TABLE_NAME:
            Fn::ImportValue: !Sub '${DynamoDbStackName}-TableName'
      Code:
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: !Ref LambdaS3Key

  WsApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      DisableExecuteApiEndpoint: false # Must be false for execute-api:ManageConnections to work
      Name: !Sub 'boardgamefiesta-${Environment}-websocket-api'
      Description: 'Board Game Fiesta WebSocket API'
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: '$request.body.action'

  WsApiDomainName:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: !If [ IsProduction, 'ws.boardgamefiesta.com', !Sub 'ws-${Environment}.boardgamefiesta.com' ]
      DomainNameConfigurations:
        - CertificateArn: 'arn:aws:acm:eu-west-1:598172618529:certificate/3a61edbf-a6b3-4090-bbfd-2298ac3ad7aa'

  WsApiRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: 'boardgamefiesta.com.'
      Name: !Ref WsApiDomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt WsApiDomainName.RegionalDomainName
        HostedZoneId: !GetAtt WsApiDomainName.RegionalHostedZoneId

  WsConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WsApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WsConnectFunction.Arn}/invocations'

  WsConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WsApi
      RouteKey: '$connect'
      AuthorizationType: NONE
      Target: !Sub 'integrations/${WsConnectIntegration}'

  WsDisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WsApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WsDisconnectFunction.Arn}/invocations'

  WsDisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WsApi
      RouteKey: '$disconnect'
      AuthorizationType: NONE
      Target: !Sub 'integrations/${WsDisconnectIntegration}'

  WsDefaultIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WsApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WsDefaultFunction.Arn}/invocations'

  WsDefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WsApi
      RouteKey: '$default'
      AuthorizationType: NONE
      Target: !Sub 'integrations/${WsDefaultIntegration}'

  WsApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref WsApi
      StageName: 'default'

# TODO Force redeployment on stack update
  WsApiDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - WsApiStage
      - WsConnectRoute
      - WsDefaultRoute
      - WsDisconnectRoute
    Properties:
      ApiId: !Ref WsApi
      StageName: !Ref WsApiStage

  WsApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    DependsOn:
      - WsApiStage
    Properties:
      ApiId: !Ref WsApi
      ApiMappingKey: ''
      DomainName: !Ref WsApiDomainName
      Stage: !Ref WsApiStage

  WsConnectFunctionApiGatewayLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WsApi
      - WsConnectFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WsConnectFunction
      Principal: apigateway.amazonaws.com

  WsDisconnectFunctionApiGatewayLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WsApi
      - WsDisconnectFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WsDisconnectFunction
      Principal: apigateway.amazonaws.com

  WsDefaultFunctionApiGatewayLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WsApi
      - WsDefaultFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WsDefaultFunction
      Principal: apigateway.amazonaws.com

  SendMessagePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - execute-api:ManageConnections
            Resource:
              # TODO Make more specific like 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WsApi}/${WsApiStage}/POST/@connections' (doesn't seem to work)
              - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WsApi}/*'

Outputs:
  WsApiId:
    Value: !Ref WsApi
    Export:
      Name: !Sub '${AWS::StackName}-WsApiId'
  WsApiEndpoint:
    Value: !Sub 'https://${WsApi}.execute-api.${AWS::Region}.amazonaws.com/${WsApiStage}'
    Export:
      Name: !Sub '${AWS::StackName}-WsApiEndpoint'
  WsApiDomainName:
    Value: !Ref WsApiDomainName
    Export:
      Name: !Sub '${AWS::StackName}-WsApiDomainName'
  SendMessagePolicyArn:
    Value: !Ref SendMessagePolicy
    Export:
      Name: !Sub '${AWS::StackName}-SendMessagePolicyArn'