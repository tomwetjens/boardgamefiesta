AWSTemplateFormatVersion: "2010-09-09"
Description: Auth for Board Game Fiesta
Parameters:
  Environment:
    Type: String
  LambdaS3Bucket:
    Type: String
  LambdaS3Key:
    Type: String
  DynamoDbStackName:
    Type: String
Conditions:
  IsProduction: !Equals [ !Ref Environment, 'prod' ]
Mappings:
  Environments:
    dev:
      UserPoolId: eu-west-1_s6Ypfd935
      WebAppClientId: 376e8rt8oopbqs5k5h2mnvl0nl
    prod:
      UserPoolId: eu-west-1_4FuZdxo27
      WebAppClientId: 75mphvul79khilegesecif6o0k
Resources:
  PreSignUpTriggerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Fn::ImportValue: !Sub '${DynamoDbStackName}-ReadOnlyPolicyArn'

  PreSignUpTriggerLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: io.quarkus.amazon.lambda.runtime.QuarkusStreamHandler::handleRequest
      MemorySize: 512
      Role: !GetAtt PreSignUpTriggerRole.Arn
      Runtime: java11
      Timeout: 60
      Environment:
        Variables:
          QUARKUS_PROFILE: !Sub '${Environment}'
          QUARKUS_LAMBDA_HANDLER: preSignUp
          BGF_DYNAMODB_TABLE_NAME:
            Fn::ImportValue: !Sub '${DynamoDbStackName}-TableName'
      Code:
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: !Ref LambdaS3Key

  PostConfirmationTriggerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:AdminAddUserToGroup
                Resource: !Join [ '', [ !Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/', !FindInMap [ Environments, !Ref 'Environment', UserPoolId ] ] ]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Fn::ImportValue: !Sub '${DynamoDbStackName}-ReadWritePolicyArn'

  PostConfirmationTriggerLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: io.quarkus.amazon.lambda.runtime.QuarkusStreamHandler::handleRequest
      MemorySize: 512
      Role: !GetAtt PostConfirmationTriggerRole.Arn
      Runtime: java11
      Timeout: 60
      Environment:
        Variables:
          QUARKUS_PROFILE: !Sub '${Environment}'
          QUARKUS_LAMBDA_HANDLER: postConfirmation
          BGF_DYNAMODB_TABLE_NAME:
            Fn::ImportValue: !Sub '${DynamoDbStackName}-TableName'
      Code:
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: !Ref LambdaS3Key

  #  UserPool:
  #    Type: AWS::Cognito::UserPool
  #    DeletionPolicy: Retain
  #    UpdateReplacePolicy: Retain
  #    Properties:
  #      UserPoolName: !Sub 'boardgamefiesta-${Environment}'
  #      AccountRecoverySetting:
  #        RecoveryMechanisms:
  #          - Name: verified_email
  #            Priority: 1
  #      AdminCreateUserConfig:
  #        AllowAdminCreateUserOnly: false
  #      AliasAttributes:
  #        - email
  #        - preferred_username
  #      AutoVerifiedAttributes:
  #        - email
  #      EmailConfiguration:
  #        EmailSendingAccount: DEVELOPER
  #        From: info@boardgamefiesta.com
  #        SourceArn: !Sub 'arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/info@boardgamefiesta.com'
  #      EmailVerificationSubject: Your verification link
  #      EmailVerificationMessage: >
  #        Please click the link below to verify your email address. {##Verify Email##}
  #      #      LambdaConfig:
  ##        PreSignUp: !GetAtt PreSignUpTriggerFunction.Arn
  ##        PostConfirmation: !GetAtt PostConfirmationTriggerFunction.Arn
  #      Policies:
  #        PasswordPolicy:
  #          MinimumLength: 8
  #          RequireLowercase: false
  #          RequireNumbers: false
  #          RequireSymbols: false
  #          RequireUppercase: false
  #          TemporaryPasswordValidityDays: 7
  #      UsernameConfiguration:
  #        CaseSensitive: false
  #

  PreSignUpTriggerPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - PreSignUpTriggerLambdaFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PreSignUpTriggerLambdaFunction.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !Join [ '', [ !Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/', !FindInMap [ Environments, !Ref 'Environment', UserPoolId ] ] ]

  PostConfirmationTriggerPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - PostConfirmationTriggerLambdaFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PostConfirmationTriggerLambdaFunction.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !Join [ '', [ !Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/', !FindInMap [ Environments, !Ref 'Environment', UserPoolId ] ] ]

#
#  UserPoolDomain:
#    Type: AWS::Cognito::UserPoolDomain
#    Properties:
#      CustomDomainConfig:
#        CertificateArn: arn:aws:acm:us-east-1:598172618529:certificate/67df310f-1baf-437f-a48c-a062182be260
#      Domain: !If [ IsProduction, 'auth2.boardgamefiesta.com', !Sub 'auth-${Environment}.boardgamefiesta.com' ]
#      UserPoolId: !Ref UserPool
#
#  WebAppClient:
#    Type: AWS::Cognito::UserPoolClient
#    Properties:
#      AccessTokenValidity: 1
#      IdTokenValidity: 1
#      RefreshTokenValidity: 30
#      AllowedOAuthFlows:
#        - code
#      AllowedOAuthFlowsUserPoolClient: True
#      AllowedOAuthScopes:
#        - profile
#        - email
#        - openid
#      CallbackURLs:
#        - !If [ IsProduction, 'https://boardgamefiesta.com', !Sub 'https://${Environment}.boardgamefiesta.com' ]
#        - !If [ IsProduction, 'https://www.boardgamefiesta.com', !Sub 'https://www-${Environment}.boardgamefiesta.com' ]
#      LogoutURLs:
#        - !If [ IsProduction, 'https://boardgamefiesta.com', !Sub 'https://${Environment}.boardgamefiesta.com' ]
#        - !If [ IsProduction, 'https://www.boardgamefiesta.com', !Sub 'https://www-${Environment}.boardgamefiesta.com' ]
#      ClientName: 'webapp'
#      DefaultRedirectURI: !Join [ '', [ 'https://', !If [ IsProduction, '', !Join [ '', [ !Ref Environment, '.' ] ] ], '.boardgamefiesta.com' ] ]
#      ExplicitAuthFlows:
#        - ALLOW_REFRESH_TOKEN_AUTH
#      GenerateSecret: false
#      SupportedIdentityProviders:
#        - COGNITO
#      UserPoolId: !Ref UserPool
#
#  DescribeUserPoolDomainRole:
#    Type: AWS::IAM::Role
#    Properties:
#      AssumeRolePolicyDocument:
#        Version: '2012-10-17'
#        Statement:
#          - Effect: Allow
#            Principal:
#              Service:
#                - lambda.amazonaws.com
#            Action:
#              - sts:AssumeRole
#      Path: "/"
#      Policies:
#        - PolicyName: root
#          PolicyDocument:
#            Version: '2012-10-17'
#            Statement:
#              - Effect: Allow
#                Action:
#                  - logs:CreateLogGroup
#                  - logs:CreateLogStream
#                  - logs:PutLogEvents
#                Resource: arn:aws:logs:*:*:*
#              - Effect: Allow
#                Action:
#                  - cognito-idp:DescribeUserPoolDomain
#                Resource: '*'
#
#  # Lambda used as custom resource to get the CloudFront distribution ID of the UserPoolDomain
#  # since that information cannot be retrieved with a !GetAtt
#  DescribeUserPoolDomain:
#    Type: AWS::Lambda::Function
#    Properties:
#      Handler: index.handler
#      MemorySize: 128
#      Role: !GetAtt DescribeUserPoolDomainRole.Arn
#      Runtime: nodejs12.x
#      Code:
#        ZipFile: |
#          var AWS = require('aws-sdk');
#          var cognitoidentityserviceprovider = new AWS.CognitoIdentityServiceProvider();
#          var response = require('cfn-response');
#          exports.handler = function (event, context) {
#              var params = {Domain: event.ResourceProperties.UserPoolDomain};
#              cognitoidentityserviceprovider.describeUserPoolDomain(params, function(err, data) {
#               if (err) response.send(event, context, response.FAILED);
#               else response.send(event, context, response.SUCCESS, data.DomainDescription);
#              });
#          };
#
#  UserPoolDomainInfo:
#    Type: Custom::DescribeUserPoolDomain
#    Properties:
#      ServiceToken: !GetAtt DescribeUserPoolDomain.Arn
#      UserPoolDomain: !Ref UserPoolDomain
#
#  AuthRecordSet:
#    Type: AWS::Route53::RecordSet
#    Properties:
#      HostedZoneName: boardgamefiesta.com.
#      Name: !Ref UserPoolDomain
#      Type: A
#      AliasTarget:
#        DNSName: !GetAtt UserPoolDomainInfo.CloudFrontDistribution
#        HostedZoneId: Z2FDTNDATAQYW2 # CloudFront
#
Outputs:
  UserPoolId:
    Value: !FindInMap [ Environments, !Ref 'Environment', UserPoolId ]
    Export:
      Name: !Sub '${AWS::StackName}-UserPoolId'
  UserPoolArn:
    Value: !Join [ '', [ !Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/', !FindInMap [ Environments, !Ref 'Environment', UserPoolId ] ] ]
    Export:
      Name: !Sub '${AWS::StackName}-UserPoolArn'
  UserPoolDomainName:
    Value: !If [ IsProduction, 'auth2.boardgamefiesta.com', !Sub 'auth-${Environment}.boardgamefiesta.com' ]
    Export:
      Name: !Sub '${AWS::StackName}-UserPoolDomainName'
  UserPoolUrl:
    Value: !Join [ '', [ !Sub 'https://cognito-idp.${AWS::Region}.amazonaws.com/', !FindInMap [ Environments, !Ref 'Environment', UserPoolId ] ] ]
    Export:
      Name: !Sub '${AWS::StackName}-UserPoolUrl'
  WebAppClientId:
    Value: !FindInMap [ Environments, !Ref 'Environment', WebAppClientId ]
    Export:
      Name: !Sub '${AWS::StackName}-WebAppClientId'
