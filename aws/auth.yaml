AWSTemplateFormatVersion: "2010-09-09"
Description: Auth for Board Game Fiesta
Parameters:
  Environment:
    Type: String
  Version:
    Type: String
  UserPoolId:
    Type: String
    Default: eu-west-1_4FuZdxo27
Conditions:
  IsProduction: !Equals [ !Ref Environment, 'prod' ]
Resources:
  MigrateUserTriggerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '${AWS::StackName}-MigrateUserTrigger'
      RetentionInDays: 7

  MigrateUserTriggerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !GetAtt MigrateUserTriggerLogGroup.Arn
              - Effect: Allow
                Action:
                  - cognito-idp:AdminInitiateAuth
                  - cognito-idp:AdminGetUser
                Resource: !Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/eu-west-1_c5qwAzc0x'

  MigrateUserTriggerLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: io.quarkus.amazon.lambda.runtime.QuarkusStreamHandler::handleRequest
      MemorySize: 512
      Role: !GetAtt MigrateUserTriggerRole.Arn
      Runtime: java11
      Timeout: 60
      Environment:
        Variables:
          QUARKUS_LAMBDA_HANDLER: migrateUser
          OLDUSERPOOLID: eu-west-1_c5qwAzc0x
          OLDCLIENTID: 39334dh8ifidq5dpmnch2vnopr
      Code:
        S3Bucket: boardgamefiesta-builds
        S3Key: !Sub '${Version}/cognito.zip'

  PreSignUpTriggerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '${AWS::StackName}-PreSignUpTrigger'
      RetentionInDays: 7

  PreSignUpTriggerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !GetAtt PreSignUpTriggerLogGroup.Arn
              - Effect: Allow
                Action:
                  - dynamodb:Query
                Resource:
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/gwt-users'
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/gwt-users/index/*'

  PreSignUpTriggerLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: io.quarkus.amazon.lambda.runtime.QuarkusStreamHandler::handleRequest
      MemorySize: 512
      Role: !GetAtt PreSignUpTriggerRole.Arn
      Runtime: java11
      Timeout: 60
      Environment:
        Variables:
          QUARKUS_LAMBDA_HANDLER: preSignUp
      Code:
        S3Bucket: boardgamefiesta-builds
        S3Key: !Sub '${Version}/cognito.zip'

  PostConfirmationTriggerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '${AWS::StackName}-PostConfirmationTrigger'
      RetentionInDays: 7

  PostConfirmationTriggerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !GetAtt PostConfirmationTriggerLogGroup.Arn
              - Effect: Allow
                Action:
                  - cognito-idp:AdminAddUserToGroup
                Resource: !Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId}'
              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:PutItem
                Resource:
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/gwt-users'
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/gwt-users/index/*'

  PostConfirmationTriggerLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: io.quarkus.amazon.lambda.runtime.QuarkusStreamHandler::handleRequest
      MemorySize: 512
      Role: !GetAtt PostConfirmationTriggerRole.Arn
      Runtime: java11
      Timeout: 60
      Environment:
        Variables:
          QUARKUS_LAMBDA_HANDLER: postConfirmation
      Code:
        S3Bucket: boardgamefiesta-builds
        S3Key: !Sub '${Version}/cognito.zip'

  #  UserPool:
  #    Type: AWS::Cognito::UserPool
  #    DeletionPolicy: Retain
  #    UpdateReplacePolicy: Retain
  #    Properties:
  #      UserPoolName: !Sub 'boardgamefiesta-${Environment}'
  #      AccountRecoverySetting:
  #        RecoveryMechanisms:
  #          - Name: verified_email
  #            Priority: 1
  #      AdminCreateUserConfig:
  #        AllowAdminCreateUserOnly: false
  #      AliasAttributes:
  #        - email
  #        - preferred_username
  #      AutoVerifiedAttributes:
  #        - email
  #      EmailConfiguration:
  #        EmailSendingAccount: DEVELOPER
  #        From: info@boardgamefiesta.com
  #        SourceArn: !Sub 'arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/info@boardgamefiesta.com'
  #      EmailVerificationSubject: Your verification link
  #      EmailVerificationMessage: >
  #        Please click the link below to verify your email address. {##Verify Email##}
  #      #      LambdaConfig:
  ##        PreSignUp: !GetAtt PreSignUpTriggerFunction.Arn
  ##        PostConfirmation: !GetAtt PostConfirmationTriggerFunction.Arn
  #      Policies:
  #        PasswordPolicy:
  #          MinimumLength: 8
  #          RequireLowercase: false
  #          RequireNumbers: false
  #          RequireSymbols: false
  #          RequireUppercase: false
  #          TemporaryPasswordValidityDays: 7
  #      UsernameConfiguration:
  #        CaseSensitive: false
  #
  MigrateUserTriggerPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - MigrateUserTriggerLambdaFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt MigrateUserTriggerLambdaFunction.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId}'

  PreSignUpTriggerPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - PreSignUpTriggerLambdaFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PreSignUpTriggerLambdaFunction.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId}'

  PostConfirmationTriggerPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - PostConfirmationTriggerLambdaFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PostConfirmationTriggerLambdaFunction.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId}'

#
#  UserPoolDomain:
#    Type: AWS::Cognito::UserPoolDomain
#    Properties:
#      CustomDomainConfig:
#        CertificateArn: arn:aws:acm:us-east-1:598172618529:certificate/67df310f-1baf-437f-a48c-a062182be260
#      Domain: !Join [ '', [ 'auth', !If [ IsProduction, '', !Join [ '',[ '-', !Ref Environment ] ] ], '.boardgamefiesta.com' ] ]
#      UserPoolId: !Ref UserPool
#
#  UserPoolClient:
#    Type: AWS::Cognito::UserPoolClient
#    Properties:
#      AccessTokenValidity: 1
#      IdTokenValidity: 1
#      RefreshTokenValidity: 30
#      AllowedOAuthFlows:
#        - code
#      AllowedOAuthFlowsUserPoolClient: True
#      AllowedOAuthScopes:
#        - profile
#        - email
#        - openid
#      CallbackURLs:
#        - !Join [ '', [ 'https://', !If [ IsProduction, '', !Join [ '', [ !Ref Environment, '.' ] ] ], 'boardgamefiesta.com' ] ]
#        - !Join [ '', [ 'https://www', !If [ IsProduction, '', !Ref Environment ], '.boardgamefiesta.com' ] ]
#      LogoutURLs:
#        - !Join [ '', [ 'https://', !If [ IsProduction, '', !Join [ '', [ !Ref Environment, '.' ] ] ], '.boardgamefiesta.com' ] ]
#        - !Join [ '', [ 'https://www', !If [ IsProduction, '', !Ref Environment ], '.boardgamefiesta.com' ] ]
#      ClientName: 'webapp'
#      DefaultRedirectURI: !Join [ '', [ 'https://', !If [ IsProduction, '', !Join [ '', [ !Ref Environment, '.' ] ] ], '.boardgamefiesta.com' ] ]
#      ExplicitAuthFlows:
#        - ALLOW_REFRESH_TOKEN_AUTH
#      GenerateSecret: false
#      SupportedIdentityProviders:
#        - COGNITO
#      UserPoolId: !Ref UserPool
#
#  DescribeUserPoolDomainRole:
#    Type: AWS::IAM::Role
#    Properties:
#      AssumeRolePolicyDocument:
#        Version: '2012-10-17'
#        Statement:
#          - Effect: Allow
#            Principal:
#              Service:
#                - lambda.amazonaws.com
#            Action:
#              - sts:AssumeRole
#      Path: "/"
#      Policies:
#        - PolicyName: root
#          PolicyDocument:
#            Version: '2012-10-17'
#            Statement:
#              - Effect: Allow
#                Action:
#                  - logs:CreateLogGroup
#                  - logs:CreateLogStream
#                  - logs:PutLogEvents
#                Resource: arn:aws:logs:*:*:*
#              - Effect: Allow
#                Action:
#                  - cognito-idp:DescribeUserPoolDomain
#                Resource: '*'
#
#  # Lambda used as custom resource to get the CloudFront distribution ID of the UserPoolDomain
#  # since that information cannot be retrieved with a !GetAtt
#  DescribeUserPoolDomain:
#    Type: AWS::Lambda::Function
#    Properties:
#      Handler: index.handler
#      MemorySize: 128
#      Role: !GetAtt DescribeUserPoolDomainRole.Arn
#      Runtime: nodejs12.x
#      Code:
#        ZipFile: |
#          var AWS = require('aws-sdk');
#          var cognitoidentityserviceprovider = new AWS.CognitoIdentityServiceProvider();
#          var response = require('cfn-response');
#          exports.handler = function (event, context) {
#              var params = {Domain: event.ResourceProperties.UserPoolDomain};
#              cognitoidentityserviceprovider.describeUserPoolDomain(params, function(err, data) {
#               if (err) response.send(event, context, response.FAILED);
#               else response.send(event, context, response.SUCCESS, data.DomainDescription);
#              });
#          };
#
#  UserPoolDomainInfo:
#    Type: Custom::DescribeUserPoolDomain
#    Properties:
#      ServiceToken: !GetAtt DescribeUserPoolDomain.Arn
#      UserPoolDomain: !Ref UserPoolDomain
#
#  AuthRecordSet:
#    Type: AWS::Route53::RecordSet
#    Properties:
#      HostedZoneName: boardgamefiesta.com.
#      Name: !Join [ '', [ 'auth', !If [ IsProduction, '', !Join [ '',[ '-', !Ref Environment ] ] ], '.boardgamefiesta.com' ] ]
#      Type: A
#      AliasTarget:
#        DNSName: !GetAtt UserPoolDomainInfo.CloudFrontDistribution
#        HostedZoneId: Z2FDTNDATAQYW2 # CloudFront
#
#Outputs:
#  UserPool:
#    Value: !GetAtt UserPool.Arn
#    Export:
#      Name: !Sub '${AWS::StackName}:UserPool'
