AWSTemplateFormatVersion: "2010-09-09"
Description: API Gateway for Board Game Fiesta
Parameters:
  Environment:
    Type: String
  LambdaS3Bucket:
    Type: String
  LambdaS3Key:
    Type: String
  DynamoDbStackName:
    Type: String
  CognitoStackName:
    Type: String
  AutomaStackName:
    Type: String
  WebSocketStackName:
    Type: String
Conditions:
  IsProduction: !Equals [ !Ref Environment, 'prod' ]
Resources:
  PayPalSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${AWS::StackName}-PayPalSecret'
      SecretString: '{"clientId":"","clientSecret":""}' # To be filled later manually

  ApiRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Fn::ImportValue: !Sub '${DynamoDbStackName}-ReadWritePolicyArn'
        - Fn::ImportValue: !Sub '${AutomaStackName}-ScheduleOnlyPolicyArn'
        - Fn::ImportValue: !Sub '${WebSocketStackName}-SendMessagePolicyArn'
      Policies:
        - PolicyName: UpdateCognitoUser
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:AdminSetUserPassword
                  - cognito-idp:AdminUpdateUserAttributes
                Resource:
                  Fn::ImportValue: !Sub '${CognitoStackName}-UserPoolArn'
        - PolicyName: SendEmail
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ses:SendEmail
                Resource: !Sub 'arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/*'
      Path: "/"

  ApiFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: io.quarkus.amazon.lambda.runtime.QuarkusStreamHandler::handleRequest
      MemorySize: 2048
      Role: !GetAtt ApiRole.Arn
      Runtime: java11
      Timeout: 60
      Environment:
        Variables:
          QUARKUS_PROFILE: !Sub '${Environment}'
          QUARKUS_HTTP_CORS_ORIGINS:
            Fn::If:
              - IsProduction
              - 'https://boardgamefiesta.com,https://www.boardgamefiesta.com,http://localhost:4200'
              - !Sub 'https://${Environment}.boardgamefiesta.com,https://www-${Environment}.boardgamefiesta.com,http://localhost:4200'
          QUARKUS_OIDC_AUTH_SERVER_URL:
            Fn::ImportValue: !Sub '${CognitoStackName}-UserPoolUrl'
          QUARKUS_OIDC_CLIENT_ID:
            Fn::ImportValue: !Sub '${CognitoStackName}-WebAppClientId'
          BGF_DYNAMODB_TABLE_NAME:
            Fn::ImportValue: !Sub '${DynamoDbStackName}-TableName'
          BGF_SQS_QUEUE_URL:
            Fn::ImportValue: !Sub '${AutomaStackName}-AutomaSqsQueueUrl'
          BGF_WS_CONNECTIONS_ENDPOINT:
            Fn::ImportValue: !Sub '${WebSocketStackName}-WsApiEndpoint'
          PAYPAL_CLIENT_ID: !Sub '{{resolve:secretsmanager:${PayPalSecret}:SecretString:clientId}}'
          PAYPAL_CLIENT_SECRET: !Sub '{{resolve:secretsmanager:${PayPalSecret}:SecretString:clientSecret}}'
      Code:
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: !Ref LambdaS3Key

  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub 'boardgamefiesta-${Environment}-rest-api'
      Description: 'Board Game Fiesta REST API'
      DisableExecuteApiEndpoint: true
      EndpointConfiguration:
        Types:
          - REGIONAL

  RestApiDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !If [ IsProduction, 'api2.boardgamefiesta.com', !Sub 'api-${Environment}.boardgamefiesta.com' ]
      EndpointConfiguration:
        Types:
          - REGIONAL
      RegionalCertificateArn: 'arn:aws:acm:eu-west-1:598172618529:certificate/3a61edbf-a6b3-4090-bbfd-2298ac3ad7aa'

  RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: 'boardgamefiesta.com.'
      Name: !Ref RestApiDomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt RestApiDomainName.RegionalDomainName
        HostedZoneId: !GetAtt RestApiDomainName.RegionalHostedZoneId

  StatsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: 'stats'
      RestApiId: !Ref RestApi
  StatsGameIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref StatsResource
      PathPart: '{gameId}'
      RestApiId: !Ref RestApi

  ProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: '{proxy+}'
      RestApiId: !Ref RestApi

  ProxyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiFunction.Arn}/invocations'
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
      ResourceId: !Ref ProxyResource
      RestApiId: !Ref RestApi

  ProxyCorsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
      ResourceId: !Ref ProxyResource
      RestApiId: !Ref RestApi

  ApiFunctionInvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ApiFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/*'

  StatsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      AuthorizationType: NONE
      ApiKeyRequired: true
      Integration:
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiFunction.Arn}/invocations'
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
      ResourceId: !Ref StatsGameIdResource
      RestApiId: !Ref RestApi

  # TODO Force redeployment on stack update
  RestApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ProxyMethod
      - ProxyCorsMethod
      - StatsMethod
    Properties:
      RestApiId: !Ref RestApi
      StageName: 'default'

  RestApiBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn:
      - RestApiDeployment
    Properties:
      BasePath: ''
      DomainName: !Ref RestApiDomainName
      RestApiId: !Ref RestApi
      Stage: 'default'

Outputs:
  RestApiId:
    Value: !Ref RestApi
    Export:
      Name: !Sub '${AWS::StackName}-RestApiId'
  RestApiDomainName:
    Value: !Ref RestApiDomainName
    Export:
      Name: !Sub '${AWS::StackName}-RestApiDomainName'